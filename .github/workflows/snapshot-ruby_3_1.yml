# name: snapshot-ruby_3_1

# on:
#   schedule:
#     - cron: '30 18 * * *' # Daily at 18:30 UTC
#   repository_dispatch:
#     types:
#       - "make-snapshot"
#       - "snapshot-ruby_3_1"
#   workflow_dispatch:
#     inputs:
#       RUBY_PATCH_URL:
#         description: Patch URL
#         required: false

# env:
#   TEST_BUNDLED_GEMS_ALLOW_FAILURES: ""

# jobs:
#   make-snapshot:
#     runs-on: ubuntu-latest
#     env:
#       archname: snapshot-ruby_3_1
#     steps:
#       - uses: actions/checkout@v4
#       - uses: ./.github/actions/make-snapshot
#         with:
#           version: "3.1"
#           fetch-branch: "ruby_3_1"
#       - uses: actions/upload-artifact@v4
#         with:
#           name: Packages
#           path: pkg
#       - uses: actions/upload-artifact@v4
#         with:
#           name: Info
#           path: pkg/info
#       - name: Check pkg
#         run: |
#           set -x
#           ls -al pkg
#           7z x pkg/*.zip $archname/revision.h
#           cat $archname/revision.h
#           7z l pkg/*.zip $archname/ChangeLog
#       - name: Upload s3
#         run: |
#           set -x
#           for ext in .tar.gz .tar.xz .zip; do
#             aws s3 cp "pkg/$archname$ext" "s3://ftp.r-l.o/pub/ruby/snapshot/$archname$ext" --no-progress
#             curl -sS -X PURGE -H "Fastly-Soft-Purge:1" "https://cache.ruby-lang.org/pub/ruby/snapshot/$archname$ext"
#           done
#           for ext in .json .yml; do
#             aws s3 cp "pkg/info/info$ext" "s3://ftp.r-l.o/pub/ruby/snapshot/$archname$ext" --no-progress
#             curl -sS -X PURGE -H "Fastly-Soft-Purge:1" "https://cache.ruby-lang.org/pub/ruby/snapshot/$archname$ext"
#           done
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.FTP_R_L_O_AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.FTP_R_L_O_AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: us-west-2
#       - uses: ruby/action-slack@v3.2.2
#         with:
#           payload: |
#             {
#               "attachments": [{
#                 "text": "${{ job.status }}: make-snapshot <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>",
#                 "color": "danger"
#               }]
#             }
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SNAPSHOT_SLACK_WEBHOOK_URL }}
#         if: failure()

#   ubuntu:
#     needs: make-snapshot
#     strategy:
#       matrix:
#         test_task: [check, test-bundler-parallel, test-bundled-gems]
#         os: [ubuntu-22.04, ubuntu-20.04]
#       fail-fast: false
#     runs-on: ${{ matrix.os }}
#     steps:
#       - run: env | sort
#       - name: Dump GitHub context
#         env:
#           GITHUB_CONTEXT: ${{ toJson(github) }}
#         run: echo "$GITHUB_CONTEXT"
#       - name: Dump job context
#         env:
#           JOB_CONTEXT: ${{ toJson(job) }}
#         run: echo "$JOB_CONTEXT"
#       - name: Dump steps context
#         env:
#           STEPS_CONTEXT: ${{ toJson(steps) }}
#         run: echo "$STEPS_CONTEXT"
#       - name: Dump runner context
#         env:
#           RUNNER_CONTEXT: ${{ toJson(runner) }}
#         run: echo "$RUNNER_CONTEXT"
#       - name: Dump strategy context
#         env:
#           STRATEGY_CONTEXT: ${{ toJson(strategy) }}
#         run: echo "$STRATEGY_CONTEXT"
#       - name: Dump matrix context
#         env:
#           MATRIX_CONTEXT: ${{ toJson(matrix) }}
#         run: echo "$MATRIX_CONTEXT"

#       - uses: actions/download-artifact@v4
#         with:
#           name: Packages
#           path: pkg
#       - name: Extract
#         run: tar xf pkg/*.tar.xz
#       - name: Apply patch
#         run: |
#           set -x
#           curl -sSL "${RUBY_PATCH_URL}" -o ruby.patch
#           cd snapshot-*/
#           git apply ../ruby.patch
#         shell: bash
#         env:
#           RUBY_PATCH_URL: "${{ github.event.inputs.RUBY_PATCH_URL }}"
#         if: "${{ github.event.inputs.RUBY_PATCH_URL != '' }}"
#       - name: Install libraries
#         run: |
#           set -x
#           sudo apt-get update -q || :
#           # postfix `-` means `uninstall`
#           APT_INSTALL_RUBY=ruby-
#           APT_INSTALL_GIT=git-
#           case "${{ matrix.test_task }}" in
#             test-bundled-gems)
#               # test-bundled-gems requires executable host ruby
#               APT_INSTALL_RUBY=ruby
#               # test-bundled-gems-fetch requires git
#               unset APT_INSTALL_GIT
#               ;;
#             test-bundler*)
#               # avoid Bundler::Source::Git::GitNotInstalledError
#               unset APT_INSTALL_GIT
#               ;;
#             *)
#               ;;
#           esac
#           sudo apt-get install --no-install-recommends -q -y build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev bison- autoconf- $APT_INSTALL_RUBY $APT_INSTALL_GIT
#       - name: Fixed world writable dirs
#         run: |
#           mkdir -p $HOME/.local
#           chmod -v a-w $HOME $HOME/.config
#           sudo chmod -R a-w /usr/share
#           sudo bash -c 'IFS=:; for d in '"$PATH"'; do chmod -v a-w $d; done' || :
#       - name: Set ENV
#         run: |
#           echo "JOBS=-j$((1 + $(nproc --all)))" >> $GITHUB_ENV
#       - name: configure
#         run: cd snapshot-*/ && ./configure
#       - name: make
#         run: cd snapshot-*/ && make $JOBS
#       - name: Tests
#         run: cd snapshot-*/ && make $JOBS -s ${{ matrix.test_task }}
#         env:
#           RUBY_TESTOPTS: "-q --tty=no"
#       # leaked-globals since 2.7
#       - name: Leaked Globals
#         run: cd snapshot-*/ && make -s leaked-globals
#         if: matrix.test_task == 'check'
#       - name: make install without root privilege
#         run: cd snapshot-*/ && make $JOBS install DESTDIR="/tmp/destdir"
#         if: matrix.test_task == 'check'
#       - name: make install
#         run: cd snapshot-*/ && sudo make $JOBS install
#         if: matrix.test_task == 'check'
#       - name: ruby -v
#         run: ruby -v
#         if: matrix.test_task == 'check'
#       - name: Show .local
#         run: find $HOME/.local -ls
#       - uses: ruby/action-slack@v3.2.2
#         with:
#           payload: |
#             {
#               "attachments": [{
#                 "text": "${{ job.status }}: ${{ matrix.os }} / ${{ matrix.test_task }} <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>",
#                 "color": "danger"
#               }]
#             }
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SNAPSHOT_SLACK_WEBHOOK_URL }}
#         if: failure()

#   macos:
#     needs: make-snapshot
#     strategy:
#       matrix:
#         test_task: [check, test-bundled-gems]
#         os: [macos-12, macos-13, macos-arm-oss]
#         include:
#           - os: macos-arm-oss
#             test_task: test-bundler-parallel
#       fail-fast: false
#     runs-on: ${{ matrix.os }}
#     steps:
#       - run: env | sort
#       - name: Dump GitHub context
#         env:
#           GITHUB_CONTEXT: ${{ toJson(github) }}
#         run: echo "$GITHUB_CONTEXT"
#       - name: Dump job context
#         env:
#           JOB_CONTEXT: ${{ toJson(job) }}
#         run: echo "$JOB_CONTEXT"
#       - name: Dump steps context
#         env:
#           STEPS_CONTEXT: ${{ toJson(steps) }}
#         run: echo "$STEPS_CONTEXT"
#       - name: Dump runner context
#         env:
#           RUNNER_CONTEXT: ${{ toJson(runner) }}
#         run: echo "$RUNNER_CONTEXT"
#       - name: Dump strategy context
#         env:
#           STRATEGY_CONTEXT: ${{ toJson(strategy) }}
#         run: echo "$STRATEGY_CONTEXT"
#       - name: Dump matrix context
#         env:
#           MATRIX_CONTEXT: ${{ toJson(matrix) }}
#         run: echo "$MATRIX_CONTEXT"

#       - uses: actions/download-artifact@v4
#         with:
#           name: Packages
#           path: pkg
#       - name: Extract
#         run: tar xf pkg/*.tar.xz
#       - name: Apply patch
#         run: |
#           set -x
#           curl -sSL "${RUBY_PATCH_URL}" -o ruby.patch
#           cd snapshot-*/
#           git apply ../ruby.patch
#         shell: bash
#         env:
#           RUBY_PATCH_URL: "${{ github.event.inputs.RUBY_PATCH_URL }}"
#         if: "${{ github.event.inputs.RUBY_PATCH_URL != '' }}"
#       - name: Install libraries
#         run: |
#           with_retry () {
#             "$@" || { sleep 5 && "$@"; } || { sleep 60 && "$@"; }
#           }
#           set -x
#           with_retry brew install gmp libffi openssl@1.1 zlib autoconf automake libtool readline
#       - name: Set ENV
#         run: |
#           echo "JOBS=-j$((1 + $(sysctl -n hw.activecpu)))" >> $GITHUB_ENV
#       - name: configure
#         run: cd snapshot-*/ && ./configure --with-openssl-dir=$(brew --prefix openssl@1.1) --with-readline-dir=$(brew --prefix readline)
#       - name: make
#         run: cd snapshot-*/ && make $JOBS
#       - name: Tests
#         run: cd snapshot-*/ && make $JOBS -s ${{ matrix.test_task }}
#         env:
#           RUBY_TESTOPTS: "-q --tty=no"
#       # leaked-globals since 2.7
#       - name: Leaked Globals
#         run: cd snapshot-*/ && make -s leaked-globals
#         if: matrix.test_task == 'check'
#       - name: make install without root privilege
#         run: cd snapshot-*/ && make $JOBS install DESTDIR="/tmp/destdir"
#         if: matrix.test_task == 'check'
#       - name: make install
#         run: cd snapshot-*/ && sudo make $JOBS install
#         if: matrix.test_task == 'check'
#       - name: ruby -v
#         run: /usr/local/bin/ruby -v
#         if: matrix.test_task == 'check'
#       - uses: ruby/action-slack@v3.2.2
#         with:
#           payload: |
#             {
#               "attachments": [{
#                 "text": "${{ job.status }}: ${{ matrix.os }} / ${{ matrix.test_task }} <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>",
#                 "color": "danger"
#               }]
#             }
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SNAPSHOT_SLACK_WEBHOOK_URL }}
#         if: failure()

#   windows:
#     needs: make-snapshot
#     strategy:
#       matrix:
#         include:
#           - vs: 2019
#             os: windows-2019
#             vcvars: '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'
#           - vs: 2022
#             os: windows-2022
#             vcvars: '"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"'
#       fail-fast: false
#     runs-on: ${{ matrix.os }}
#     defaults:
#       run:
#         shell: cmd
#     name: VisualStudio ${{ matrix.vs }}
#     env:
#       GITPULLOPTIONS: --no-tags origin ${{github.ref}}
#       VCVARS: ${{ matrix.vcvars }}
#       PATCH: C:\msys64\usr\bin\patch.exe
#     steps:
#       - run: env | sort
#       - name: Dump GitHub context
#         env:
#           GITHUB_CONTEXT: ${{ toJson(github) }}
#         run: echo "$GITHUB_CONTEXT"
#       - name: Dump job context
#         env:
#           JOB_CONTEXT: ${{ toJson(job) }}
#         run: echo "$JOB_CONTEXT"
#       - name: Dump steps context
#         env:
#           STEPS_CONTEXT: ${{ toJson(steps) }}
#         run: echo "$STEPS_CONTEXT"
#       - name: Dump runner context
#         env:
#           RUNNER_CONTEXT: ${{ toJson(runner) }}
#         run: echo "$RUNNER_CONTEXT"
#       - name: Dump strategy context
#         env:
#           STRATEGY_CONTEXT: ${{ toJson(strategy) }}
#         run: echo "$STRATEGY_CONTEXT"
#       - name: Dump matrix context
#         env:
#           MATRIX_CONTEXT: ${{ toJson(matrix) }}
#         run: echo "$MATRIX_CONTEXT"

#       - run: md build
#         working-directory:
#       - uses: msys2/setup-msys2@v2
#         id: setup-msys2
#         with:
#           update: true
#           install: >-
#             bison patch
#       - name: patch path
#         shell: msys2 {0}
#         run: echo PATCH=$(cygpath -wa $(command -v patch)) >> $GITHUB_ENV
#         if: ${{ steps.setup-msys2.outcome == 'success' }}
#       - uses: actions/cache@v4
#         with:
#           path: C:\vcpkg\installed
#           key: ${{ runner.os }}-vcpkg-installed-${{ matrix.os }}-${{ github.sha }}
#           restore-keys: |
#             ${{ runner.os }}-vcpkg-installed-${{ matrix.os }}-
#             ${{ runner.os }}-vcpkg-installed-
#       - name: Install libraries with vcpkg
#         run: |
#           vcpkg --triplet x64-windows install openssl readline zlib
#       - uses: actions/download-artifact@v4
#         with:
#           name: Packages
#           path: pkg
#       - name: Extract
#         run: 7z x pkg/*.zip
#       - name: Apply patch
#         run: |
#           set -x
#           curl -sSL "${RUBY_PATCH_URL}" -o ruby.patch
#           cd snapshot-*/
#           git apply ../ruby.patch
#         shell: bash
#         env:
#           RUBY_PATCH_URL: "${{ github.event.inputs.RUBY_PATCH_URL }}"
#         if: "${{ github.event.inputs.RUBY_PATCH_URL != '' }}"
#       - name: setup env
#         # %TEMP% is inconsistent with %TMP% and test-all expects they are consistent.
#         # https://github.com/actions/virtual-environments/issues/712#issuecomment-613004302
#         # msys2/setup-msys2 installs MSYS2 to D:/a/_temp/msys64/usr/bin
#         run: |
#           set Path=D:/a/_temp/msys64/usr/bin;%Path%
#           set | C:\msys64\usr\bin\sort > old.env
#           call %VCVARS%
#           set TMP=%USERPROFILE%\AppData\Local\Temp
#           set TEMP=%USERPROFILE%\AppData\Local\Temp
#           set | C:\msys64\usr\bin\sort > new.env
#           C:\msys64\usr\bin\comm -13 old.env new.env >> %GITHUB_ENV%
#           del *.env
#       - name: Configure
#         run: |
#           cd snapshot-*
#           win32/configure.bat --disable-install-doc --enable-bundled-libffi --enable-bundled-libyaml --with-opt-dir=C:/vcpkg/installed/x64-windows --with-openssl-dir="C:/Program Files/OpenSSL-Win64"
#       - name: nmake
#         run: |
#           cd snapshot-*
#           echo ^#^#[group]nmake up
#           nmake up
#           echo ^#^#[endgroup]
#           echo ^#^#[group]nmake
#           nmake
#           echo ^#^#[endgroup]
#         env:
#           YACC: bison
#       - name: ruby -v
#         run: |
#           cd snapshot-*
#           .\ruby -v
#       - name: nmake test
#         timeout-minutes: 5
#         run: |
#           cd snapshot-*
#           nmake test
#       - name: nmake test-all
#         timeout-minutes: 60
#         run: |
#           cd snapshot-*
#           nmake test-all TESTOPTS="-j%NUMBER_OF_PROCESSORS% --job-status=normal"
#       - name: nmake test-spec
#         timeout-minutes: 10
#         run: |
#           cd snapshot-*
#           nmake test-spec
#       - uses: ruby/action-slack@v3.2.2
#         with:
#           payload: |
#             {
#               "attachments": [{
#                 "text": "${{ job.status }}: ${{ matrix.os }} (vs${{ matrix.vs }}) <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>",
#                 "color": "danger"
#               }]
#             }
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SNAPSHOT_SLACK_WEBHOOK_URL }}
#         if: failure()
